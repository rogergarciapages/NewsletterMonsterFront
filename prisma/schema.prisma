datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  user_id       String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String
  email         String       @unique
  password      String
  profile_photo String?
  created_at    DateTime     @default(now())
  favorites     Favorite[]
  followers     Follower[]   @relation("UserFollowed")
  following     Follower[]   @relation("UserFollowing")
  likes         Like[]
  newsletters   Newsletter[]
  userTags      UserTag[]
  youRocks      YouRock[]
  bookmarks     Bookmark[]
}

model Newsletter {
  newsletter_id       Int                 @id @default(autoincrement())
  user_id             String              @db.Uuid
  sender              String
  date                DateTime
  html_file_url       String
  full_screenshot_url String?
  top_screenshot_url  String?
  likes_count         Int                 @default(0)
  youRocks_count      Int                 @default(0)
  created_at          DateTime            @default(now())
  favorites           Favorite[]
  featuredNewsletter  FeaturedNewsletter?
  likes               Like[]
  user                User                @relation(fields: [user_id], references: [user_id])
  newsletterTags      NewsletterTag[]
  youRocks            YouRock[]
  awards              Award[]
  bookmarks           Bookmark[]
}

model Follower {
  follower_id       Int    @id @default(autoincrement())
  user_id           String @db.Uuid
  following_user_id String @db.Uuid
  user_followed     User   @relation("UserFollowed", fields: [following_user_id], references: [user_id])
  user_following    User   @relation("UserFollowing", fields: [user_id], references: [user_id])
}

model Tag {
  tag_id         Int             @id @default(autoincrement())
  name           String          @unique
  newsletterTags NewsletterTag[]
  userTags       UserTag[]
}

model NewsletterTag {
  id            Int        @id @default(autoincrement())
  newsletter_id Int
  tag_id        Int
  newsletter    Newsletter @relation(fields: [newsletter_id], references: [newsletter_id])
  tag           Tag        @relation(fields: [tag_id], references: [tag_id])
}

model UserTag {
  id      Int    @id @default(autoincrement())
  user_id String @db.Uuid
  tag_id  Int
  tag     Tag    @relation(fields: [tag_id], references: [tag_id])
  user    User   @relation(fields: [user_id], references: [user_id])
}

model Like {
  like_id       Int        @id @default(autoincrement())
  user_id       String     @db.Uuid
  newsletter_id Int
  newsletter    Newsletter @relation(fields: [newsletter_id], references: [newsletter_id])
  user          User       @relation(fields: [user_id], references: [user_id])

  @@unique([user_id, newsletter_id])
}

model Favorite {
  favorite_id   Int        @id @default(autoincrement())
  user_id       String     @db.Uuid
  newsletter_id Int
  newsletter    Newsletter @relation(fields: [newsletter_id], references: [newsletter_id])
  user          User       @relation(fields: [user_id], references: [user_id])
}

model FeaturedNewsletter {
  id            Int        @id @default(autoincrement())
  newsletter_id Int        @unique
  featured_at   DateTime   @default(now())
  newsletter    Newsletter @relation(fields: [newsletter_id], references: [newsletter_id])
}

model YouRock {
  youRock_id    Int        @id @default(autoincrement())
  user_id       String     @db.Uuid
  newsletter_id Int
  newsletter    Newsletter @relation(fields: [newsletter_id], references: [newsletter_id])
  user          User       @relation(fields: [user_id], references: [user_id])

  @@unique([user_id, newsletter_id, created_at])
  created_at    DateTime   @default(now())
}

model Award {
  award_id      Int        @id @default(autoincrement())
  newsletter_id Int
  award_type    String
  awarded_at    DateTime   @default(now())
  newsletter    Newsletter @relation(fields: [newsletter_id], references: [newsletter_id])
}

model Bookmark {
  bookmark_id   Int        @id @default(autoincrement())
  user_id       String     @db.Uuid
  newsletter_id Int
  created_at    DateTime   @default(now())
  newsletter    Newsletter @relation(fields: [newsletter_id], references: [newsletter_id])
  user          User       @relation(fields: [user_id], references: [user_id])

  @@unique([user_id, newsletter_id])
}
